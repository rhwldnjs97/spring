<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="member">
	<select id="getPasswdFind" parameterType="Map" resultType="String">
	select passwd from member
	where mname = #{mname} and id = #{id}
	</select>
	<select id="getIdFind" parameterType="Map" resultType="String">
	select passwd from member
	where mname = #{mname} and email = #{email}
	</select>
	<select id="getGrade" parameterType="String" resultType="String">
	select grade from member
	where id = #{id}
	</select>
	<select id="loginCheck" parameterType="Map" resultType="int">
	select count(*) from member
	where id = #{id} and passwd = #{passwd}
	</select>
	<select id="getFname" parameterType="String" resultType="String">
	select fname from member
	where id = #{id}
	</select>
	<select id="passwdCheck" parameterType="Map" resultType="int">
	SELECT COUNT(*)  
	FROM member      
	id = #{id} and passwd = #{oldpasswd}
	</select>
	<update id="updatePasswd" parameterType="Map">
	update member 
	set passwd = #{passwd}
	where id = #{id}
	</update>
	<update id="updateFile" parameterType="Map">
	update member
	set fname = #{fname}
	where id = #{id}
	</update>
	<select id="duplicateEmail" parameterType="String" resultType="int">
	SELECT COUNT(email)
	FROM member 
	WHERE email=#{email}
	</select>
	<select id="duplicateId" parameterType="String" resultType="int">
	SELECT COUNT(id)
	FROM member 
	WHERE id=#{id}
	</select>
	<delete id="delete" parameterType="String">
	delete from member
	where id = #{id}
	</delete>
	<select id="read" parameterType="String" resultType="MemberDTO">
	SELECT id, passwd, mname, tel, email, zipcode, address1, address2, job, mdate, fname, grade
	FROM member                                                                            
	WHERE id= #{id}                                                                            
	</select>
	<select id="list" parameterType="Map" resultType="MemberDTO">
	SELECT id, mname, tel, email, zipcode, address1, address2, fname, r        
	FROM(                                                                       
	SELECT id, mname, tel, email, zipcode, address1, address2, fname, rownum as r
	FROM(                                                                    
	SELECT id, mname, tel, email, zipcode, address1, address2, fname      
	FROM member  
	<where>
		<if test="col=='mname'">
		mname like '%'||#{word}||'%'			
		</if>
		<if test="col=='email'">
		email like '%'||#{word}||'%'			
		</if>
		<if test="col=='id'">
		id like '%'||#{word}||'%'			
		</if>
	</where>
		ORDER BY mdate DESC )
		<![CDATA[) WHERE r>=#{sno} and r<=#{eno}]]>                                               
	
	</select>
	<select id="total" parameterType="Map" resultType="int">
	select count(*) from member
	<where>
		<if test="col=='mname'">
		mname like '%'||#{word}||'%'			
		</if>
		<if test="col=='email'">
		email like '%'||#{word}||'%'			
		</if>
		<if test="col=='id'">
		id like '%'||#{word}||'%'			
		</if>
	</where>
	</select>
	<insert id="create" parameterType="MemberDTO">
	INSERT INTO member(                                           
	id, passwd, mname, tel, email, zipcode, address1, address2, job, mdate, fname)
	VALUES(                                                                       
	#{id}, #{passwd}, #{mname}, #{tel}, #{email}, #{zipcode, jdbcType="VARCHAR"}, #{address1, jdbcType="VARCHAR"}, #{address2, jdbcType="VARCHAR"}, #{job}, sysdate, #{fname})                                   
	</insert>
	
	<update id="update" parameterType="MemberDTO">
	UPDATE member
	SET     
	tel=#{tel},    
	email=#{email},  
	zipcode=#{zipcode, jdbcType="VARCHAR"}, 
	address1=#{address1, jdbcType="VARCHAR"}, 
	address2=#{address2, jdbcType="VARCHAR"},
	job=#{job}    
	WHERE id = #{id} 
	</update>
	
	
</mapper>